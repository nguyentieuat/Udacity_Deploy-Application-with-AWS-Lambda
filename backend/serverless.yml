service: serverless-todo-app
frameworkVersion: '3'

plugins:
  - serverless-iam-roles-per-function
  #- serverless-webpack
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Todo APP
        description: Serverless application Todo app
    models:
      - name: createTodoRequest
        contentType: application/json
        schema: ${file(models/create-todo-request.json)}
      - name: updateTodoRequest
        contentType: application/json
        schema: ${file(models/update-todo-request.json)}

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  profile: default

  # For X-Ray tracing
  tracing:
    lambda: true
    apiGateway: true

  # For API Gateway CORS
  httpApi:
    cors: true  
  
  # Environment variables
  environment:
    TODOS_TABLE: Todo-Table-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIdx
    ATTACHMENT_S3_BUCKET: serverless-todo-s3-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    PROJECT_NAME: serverless-todo-app
    INDEX_NAME: ${self:provider.environment.TODOS_CREATED_AT_INDEX}

  logs:
    # Enalbe API gateway logs
    restApi:
      true

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # GetTodos: Only allow Querry() on TODOS_TABLE
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          authorizer: Auth
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'dynamodb:Query'
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      

  # CreateTodo: Validate HTTP Requests by API Gateway
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          authorizer: Auth
          cors: true
          request:
            schemas:
              application/json: ${file(models/create-todo-request.json)}
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:          
          - 'dynamodb:GetItem'
          - 'dynamodb:PutItem'          
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}


  # UpdateTodo: Validate HTTP request by API gateway
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          authorizer: Auth
          cors: true
          request:
            schemas:
              application/json: ${file(models/update-todo-request.json)}
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'dynamodb:UpdateItem'
          - 'dynamodb:Query'
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # DeleteTodo: allow to DeleteItem
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          authorizer: Auth
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'dynamodb:DeleteItem'         
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # GenerateUploadUrl: allow to PutObject & GetObject
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          authorizer: Auth
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 's3:PutObject'
          - 's3:GetObject'
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
      - Effect: 'Allow'
        Action:
          - 'dynamodb:UpdateItem'
          - 'dynamodb:Query'          
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

resources:
  Resources:    
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    
    # Allocate "TodosTable" DynamoDB with local secondary index (LSI) using the same partion key
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: todoId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
        KeySchema:
        - AttributeName: userId #Partion key
          KeyType: HASH
        - AttributeName: todoId #Sort key
          KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        LocalSecondaryIndexes:
        - IndexName: ${self:provider.environment.TODOS_CREATED_AT_INDEX}
          KeySchema:
            - AttributeName: userId #Same partion key
              KeyType: HASH
            - AttributeName: createdAt #index
              KeyType: RANGE
          Projection:
            ProjectionType: ALL # What attributes will be copied to an index
    
    # Allocate S3 Bucket for attachment
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
          
